# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build

on:
  push:
    branches:
    - '**'
    tags-ignore:
    - '**'
    paths-ignore:
    - '**/*.adoc'
    - '**/*.md'
    - '.github/*.yml'
  pull_request:
  workflow_dispatch:
    # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

defaults:
  run:
    shell: bash

env:
  # https://docs.brew.sh/Manpage#environment
  HOMEBREW_NO_ANALYTICS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

  # these env variables are also used by TestRunner.hx
  TEST_SSH_HOST: 127.0.0.1
  TEST_SSH_PORT: 2222
  TEST_SSH_USER: testuser
  TEST_SSH_PW: MySuperPW123
  TEST_SSH_PEMKEY_FILE: test/id_key.txt
  TEST_SSH_PPKKEY_FILE: test/id_key.ppk
  TEST_SSH_PUBKEY_FILE: test/id_pub.txt

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: 
        - ubuntu-latest
        - macos-latest
        - windows-latest
        haxe:
        - 4.2.5

    steps:
    - name: Show environment variables
      run: env | sort

    - name: Git Checkout
      uses: actions/checkout@v3 #https://github.com/actions/checkout

    - name: "Cache: Haxelib Repository"
      uses: actions/cache@v3
      with:
        path: ${{ runner.tool_cache }}/haxe/${{ matrix.haxe }}/x64/lib
        # https://github.com/actions/cache/issues/342#issuecomment-673371329
        key: ${{ runner.os }}-haxelib-${{ matrix.haxe }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-haxelib-${{ matrix.haxe }}-

    - name: "Linux: Configure APT"
      if: runner.os == 'Linux'
      run: |
        # Workaround to avoid sporadic connectivity issues "Could not connect to azure.archive.ubuntu.com:80"
        # see https://github.com/actions/virtual-environments/issues/675
        echo 'APT::Acquire::Retries "3";' | sudo tee /etc/apt/apt.conf.d/80-acquire-retries
        if ! curl --max-time 3 --output /dev/null --silent --head --fail "http://azure.archive.ubuntu.com/ubuntu/dists/"; then
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
        fi

        # avoid potential 404 see https://github.com/actions/runner-images/issues/592
        sudo apt-get update 

    - name: "MacOS: Update brew formulas"
      if: runner.os == 'macOS'
      run: |
        set -eu

        echo "::group::brew update" && brew update && echo "::endgroup::"
        echo "::group::brew config" && brew config && echo "::endgroup::"
        echo "::group::brew list" && brew list --version && echo "::endgroup::"

        # workaround to prevent "Error: The `brew link` step did not complete successfully" during "brew install mono"
        # and setup-python action, see https://github.com/actions/setup-python/issues/577
        rm -f \
          /usr/local/share/man/man1/* \
          /usr/local/share/man/man5/* \
          /usr/local/bin/idle3 \
          /usr/local/bin/2to3 \
          /usr/local/bin/idle3 \
          /usr/local/bin/pydoc3 \
          /usr/local/bin/python3 \
          /usr/local/bin/python3-config

    - name: "Install: Python 3"
      uses: actions/setup-python@v4 # https://github.com/actions/setup-python
      with:
        python-version: "3.10"

    - name: 'MacOS: Load Homebrew Docker cache'
      # https://github.com/docker-practice/actions-setup-docker/issues/21
      uses: actions/cache@v3
      if: runner.os == 'macOS'
      with:
        path: |
          ~/Library/Caches/Homebrew/downloads/*--Docker.dmg
        key: brew-actions-setup-docker-1.0.11
        restore-keys: brew-actions-setup-docker-

    - name: "MacOS: Install docker"
      if: runner.os == 'macOS'
      uses: docker-practice/actions-setup-docker@master
      timeout-minutes: 12

    - name: "Install: Putty plink"
      run: |
        set -eu

        case "${{runner.os}}" in
          macOS) brew install putty; plink -V ;;
          Linux) sudo apt-get install -y putty-tools; plink -V ;;
          Windows)
            mkdir /tmp/kitty
            curl -sSfL https://www.9bis.net/kitty/files/klink.exe -o /tmp/kitty/klink.exe
            echo "$(cygpath -wa /tmp/kitty)" >> $GITHUB_PATH
            /tmp/kitty/klink -V
            ;;
        esac

    - name: "Create Windows testuser for SSH"
      if: runner.os == 'Windows'
      shell: cmd
      run: net user /ADD "${{ env.TEST_SSH_USER }}" "${{ env.TEST_SSH_PW }}"

    - name: "Start local test SSH server"
      run: |
        set -euxo pipefail

        chmod 400 test/id_*

        case "${{runner.os}}" in
          Windows)
            # prevents setgid: Invalid argument
            mkpasswd -l | tee /etc/passwd
            mkgroup -l > /etc/group

            /usr/bin/ssh-keygen -A # generate host keys for sshd

            cat <<EOF > /etc/ssh/sshd_config
        ListenAddress ${{ env.TEST_SSH_HOST }}
        Port ${{ env.TEST_SSH_PORT }}
        PermitRootLogin no
        StrictModes no
        PubkeyAuthentication yes
        IgnoreUserKnownHosts yes
        PasswordAuthentication yes
        PermitEmptyPasswords no
        LogLevel DEBUG3
        match User ${{ env.TEST_SSH_USER }}
          AuthorizedKeysFile $(pwd)/${{ env.TEST_SSH_PUBKEY_FILE }}
        EOF
            /usr/bin/sshd -T # test config

            # install PsExec to run sshd as SYSTEM without having to configure it as a system service
            curl -sSfL -o PSTools.zip http://download.sysinternals.com/files/PSTools.zip
            unzip PSTools.zip PsExec64.exe

            # launch sshd in background as SYSTEM to prevent "/usr/bin/bash: Operation not permitted"
            ./PsExec64 -accepteula -d -s "$(cygpath -w /usr/bin/sshd)" -E /tmp/sshd.log &
            sleep 5

            # TODO for some reason on GitHub Actions under Windows accepting new host keys doesn't work 
            # when plink/klink is executed via the PuttySSHClient class, so for now we accept
            # the key before the Windows tests run
            klink -auto-store-sshkey \
              -P ${{ env.TEST_SSH_PORT }} \
              -pw ${{ env.TEST_SSH_PW }} \
              ${{ env.TEST_SSH_USER }}@${{ env.TEST_SSH_HOST }} \
              "whoami"
            ;;

          *)
            touch /tmp/sshd.log
            docker run -d --rm \
              --name "openssh-server" \
              -e PASSWORD_ACCESS=true \
              -e USER_PASSWORD=MySuperPW123  \
              -e USER_NAME=testuser  \
              -e PUBLIC_KEY_FILE=/config/id_pub.txt  \
              -p 2222:2222 \
              --volume $(pwd)/${{ env.TEST_SSH_PUBKEY_FILE }}:/config/id_pub.txt:ro  \
              --volume /tmp/sshd.log:/config/logs/openssh/current:rw \
              lscr.io/linuxserver/openssh-server:latest
            ;;
        esac

    - name: "Install: Haxe ${{ matrix.haxe }}"
      uses: krdlab/setup-haxe@v1 # https://github.com/krdlab/setup-haxe
      with:
        haxe-version: ${{ matrix.haxe }}

    - name: "Install: Haxe Libraries"
      run: |
        set -eu

        haxelib config

        for lib in haxe-concurrent haxe-doctest haxe-files haxe-strings hx3compat; do
          echo "::group::install_$lib"
          haxelib install $lib
          haxelib --always update $lib || true
          echo "::endgroup::"
        done

        # install latest travix version
        haxelib git travix https://github.com/back2dos/travix
        pushd .
        cd $(haxelib config)travix/git
        haxe build-neko.hxml -lib hx3compat
        popd

        haxelib dev haxe-sshclient .

    ##################################################
    # Tests
    ##################################################

    - name: Test [neko]
      run: haxelib run travix neko

    - name: Test [hl]
      if: runner.os != 'Linux' # prebuild linux binary available yet
      run: haxelib run travix hl

    - name: Test [java]
      run: |
        java -version
        haxelib run travix java

    - name: Test [jvm]
      run: haxelib run travix java -D jvm

    - name: Test [python]
      run: |
        python --version
        haxelib run travix python

    - name: Test [cs]
      run: haxelib run travix cs

    - name: Test [cpp]
      run: haxelib run travix cpp

    ##################################################
    # Dipslay logs
    ##################################################
    - name: SSHD logs
      if: always()
      run: cat /tmp/sshd.log || true

  ###########################################################
  cleanup:
  ###########################################################
    runs-on: ubuntu-latest
    needs: 
      - build

    steps:
    - name: "Delete intermediate build artifacts"
      uses: geekyeggo/delete-artifact@v2 # https://github.com/GeekyEggo/delete-artifact/
      with:
        name: "*"
        failOnError: false
